These functions still need to be implemented for X86 unit tests to run:

Note: I2S can be stubs. vTask can run through thread probably. xQueue should be a queue. nvs is already implemented, but needs forwarders. UART needs work.
TODO: Two things need to be captured: (1) uart/pin/etc and (2) timings. All timings are 0, *unless* something sleeps, which updates the 'current time'. So I don't want to emulate as-is, but rather make things super-fast. The only notable exception is spinlocks... we should device something to handle that.

"__int64 __cdecl esp_timer_get_time(void)" (?esp_timer_get_time@@YA_JXZ)
"class SPIClass SPI" (?SPI@@3VSPIClass@@A)
"class fs::SDFS SD" (?SD@@3VSDFS@fs@@A)
"class fs::SPIFFSFS SPIFFS" (?SPIFFS@@3VSPIFFSFS@fs@@A)
"double __cdecl ledcSetup(unsigned char,double,unsigned char)" (?ledcSetup@@YANENE@Z)
"enum esp_reset_reason_t __cdecl esp_reset_reason(void)" (?esp_reset_reason@@YA?AW4esp_reset_reason_t@@XZ)
"enum i2s_out_pulser_status_t __cdecl i2s_out_get_pulser_status(void)" (?i2s_out_get_pulser_status@@YA?AW4i2s_out_pulser_status_t@@XZ)
"int __cdecl i2s_out_init(void)" (?i2s_out_init@@YAHXZ)
"int __cdecl i2s_out_reset(void)" (?i2s_out_reset@@YAHXZ)
"int __cdecl i2s_out_set_passthrough(void)" (?i2s_out_set_passthrough@@YAHXZ)
"int __cdecl i2s_out_set_pulse_callback(void (__cdecl*)(void))" (?i2s_out_set_pulse_callback@@YAHP6AXXZ@Z)
"int __cdecl i2s_out_set_pulse_period(unsigned int)" (?i2s_out_set_pulse_period@@YAHI@Z)
"int __cdecl i2s_out_set_stepping(void)" (?i2s_out_set_stepping@@YAHXZ)
"int __cdecl nvs_erase_key(class NvsEmulator *,char const *)" (?nvs_erase_key@@YAHPAVNvsEmulator@@PBD@Z)
"int __cdecl nvs_get_blob(class NvsEmulator *,char const *,void *,unsigned int *)" (?nvs_get_blob@@YAHPAVNvsEmulator@@PBDPAXPAI@Z)
"int __cdecl nvs_get_i32(class NvsEmulator *,char const *,int *)" (?nvs_get_i32@@YAHPAVNvsEmulator@@PBDPAH@Z)
"int __cdecl nvs_get_i8(class NvsEmulator *,char const *,signed char *)" (?nvs_get_i8@@YAHPAVNvsEmulator@@PBDPAC@Z)
"int __cdecl nvs_get_str(class NvsEmulator *,char const *,char *,unsigned int *)" (?nvs_get_str@@YAHPAVNvsEmulator@@PBDPADPAI@Z)
"int __cdecl nvs_open(char const *,enum nvs_open_mode,class NvsEmulator * *)" (?nvs_open@@YAHPBDW4nvs_open_mode@@PAPAVNvsEmulator@@@Z)
"int __cdecl nvs_set_blob(class NvsEmulator *,char const *,void const *,unsigned int)" (?nvs_set_blob@@YAHPAVNvsEmulator@@PBDPBXI@Z)
"int __cdecl nvs_set_i32(class NvsEmulator *,char const *,int)" (?nvs_set_i32@@YAHPAVNvsEmulator@@PBDH@Z)
"int __cdecl nvs_set_i8(class NvsEmulator *,char const *,int)" (?nvs_set_i8@@YAHPAVNvsEmulator@@PBDH@Z)
"int __cdecl nvs_set_str(class NvsEmulator *,char const *,char const *)" (?nvs_set_str@@YAHPAVNvsEmulator@@PBD1@Z)
"int __cdecl rmt_config(struct rmt_config_t const *)" (?rmt_config@@YAHPBUrmt_config_t@@@Z)
"int __cdecl rmt_fill_tx_items(enum rmt_channel_t,struct rmt_item32_s const *,unsigned short,unsigned short)" (?rmt_fill_tx_items@@YAHW4rmt_channel_t@@PBUrmt_item32_s@@GG@Z)
"int __cdecl rmt_set_source_clk(enum rmt_channel_t,enum rmt_source_clk_t)" (?rmt_set_source_clk@@YAHW4rmt_channel_t@@W4rmt_source_clk_t@@@Z)
"int __cdecl strcasecmp(char const *,char const *)" (?strcasecmp@@YAHPBD0@Z)
"int __cdecl strncasecmp(char const *,char const *,unsigned int)" (?strncasecmp@@YAHPBD0I@Z)
"int __cdecl temperatureRead(void)" (?temperatureRead@@YAHXZ)
"int __cdecl uart_driver_install(enum uart_port_t,int,int,int,void * *,int)" (?uart_driver_install@@YAHW4uart_port_t@@HHHPAPAXH@Z)
"int __cdecl uart_flush(enum uart_port_t)" (?uart_flush@@YAHW4uart_port_t@@@Z)
"int __cdecl uart_get_buffered_data_len(enum uart_port_t,unsigned int *)" (?uart_get_buffered_data_len@@YAHW4uart_port_t@@PAI@Z)
"int __cdecl uart_param_config(enum uart_port_t,struct uart_config_t const *)" (?uart_param_config@@YAHW4uart_port_t@@PBUuart_config_t@@@Z)
"int __cdecl uart_read_bytes(enum uart_port_t,unsigned char *,unsigned int,unsigned int)" (?uart_read_bytes@@YAHW4uart_port_t@@PAEII@Z)
"int __cdecl uart_set_mode(enum uart_port_t,enum uart_mode_t)" (?uart_set_mode@@YAHW4uart_port_t@@W4uart_mode_t@@@Z)
"int __cdecl uart_set_pin(enum uart_port_t,int,int,int,int)" (?uart_set_pin@@YAHW4uart_port_t@@HHHH@Z)
"int __cdecl uart_wait_tx_done(enum uart_port_t,unsigned int)" (?uart_wait_tx_done@@YAHW4uart_port_t@@I@Z)
"int __cdecl uart_write_bytes(enum uart_port_t,char const *,unsigned int)" (?uart_write_bytes@@YAHW4uart_port_t@@PBDI@Z)
"int __cdecl xPortGetFreeHeapSize(void)" (?xPortGetFreeHeapSize@@YAHXZ)
"int __cdecl xQueueGenericReceive(void *,void * const,unsigned int,int)" (?xQueueGenericReceive@@YAHPAXQAXIH@Z)
"int __cdecl xQueueGenericReset(void *,int)" (?xQueueGenericReset@@YAHPAXH@Z)
"int __cdecl xQueueGenericSend(void *,void const * const,unsigned int,int)" (?xQueueGenericSend@@YAHPAXQBXIH@Z)
"int __cdecl xQueueGenericSendFromISR(void *,void const * const,int * const,int)" (?xQueueGenericSendFromISR@@YAHPAXQBXQAHH@Z)
"int __cdecl xTaskCreatePinnedToCore(void (__cdecl*)(void *),char const * const,unsigned int,void * const,unsigned int,void * * const,int)" (?xTaskCreatePinnedToCore@@YAHP6AXPAX@ZQBDIQAXIQAPAXH@Z)
"protected: int __thiscall Stream::timedPeek(void)" (?timedPeek@Stream@@IAEHXZ)
"protected: int __thiscall Stream::timedRead(void)" (?timedRead@Stream@@IAEHXZ)
"public: bool __thiscall Stream::findUntil(char const *,unsigned int,char const *,unsigned int)" (?findUntil@Stream@@QAE_NPBDI0I@Z)
"public: bool __thiscall fs::SDFS::begin(unsigned char,class SPIClass &,unsigned int,char const *,unsigned char,bool)" (?begin@SDFS@fs@@QAE_NEAAVSPIClass@@IPBDE_N@Z)
"public: bool __thiscall fs::SPIFFSFS::begin(bool,char const *,unsigned char,char const *)" (?begin@SPIFFSFS@fs@@QAE_N_NPBDE1@Z)
"public: bool __thiscall fs::SPIFFSFS::format(void)" (?format@SPIFFSFS@fs@@QAE_NXZ)
"public: char const * __thiscall EspClass::getSdkVersion(void)" (?getSdkVersion@EspClass@@QAEPBDXZ)
"public: unsigned __int64 __thiscall EspClass::getEfuseMac(void)" (?getEfuseMac@EspClass@@QAE_KXZ)
"public: unsigned __int64 __thiscall fs::SDFS::cardSize(void)" (?cardSize@SDFS@fs@@QAE_KXZ)
"public: unsigned __int64 __thiscall fs::SDFS::totalBytes(void)" (?totalBytes@SDFS@fs@@QAE_KXZ)
"public: unsigned __int64 __thiscall fs::SDFS::usedBytes(void)" (?usedBytes@SDFS@fs@@QAE_KXZ)
"public: unsigned int __thiscall EspClass::getCpuFreqMHz(void)" (?getCpuFreqMHz@EspClass@@QAEIXZ)
"public: unsigned int __thiscall EspClass::getFlashChipSize(void)" (?getFlashChipSize@EspClass@@QAEIXZ)
"public: unsigned int __thiscall EspClass::getFreeHeap(void)" (?getFreeHeap@EspClass@@QAEIXZ)
"public: unsigned int __thiscall fs::SPIFFSFS::totalBytes(void)" (?totalBytes@SPIFFSFS@fs@@QAEIXZ)
"public: unsigned int __thiscall fs::SPIFFSFS::usedBytes(void)" (?usedBytes@SPIFFSFS@fs@@QAEIXZ)
"public: void __thiscall EspClass::restart(void)" (?restart@EspClass@@QAEXXZ)
"public: void __thiscall fs::SDFS::end(void)" (?end@SDFS@fs@@QAEXXZ)
"struct EspClass ESP" (?ESP@@3UEspClass@@A)
"struct hw_timer_s * __cdecl timerBegin(unsigned char,unsigned short,bool)" (?timerBegin@@YAPAUhw_timer_s@@EG_N@Z)
"struct ledc_dev_t volatile LEDC" (?LEDC@@3Uledc_dev_t@@C)
"struct rmt_dev_s volatile RMT" (?RMT@@3Urmt_dev_s@@C)
"unsigned int __cdecl getApbFrequency(void)" (?getApbFrequency@@YAIXZ)
"unsigned int __cdecl i2s_out_push_sample(unsigned int)" (?i2s_out_push_sample@@YAII@Z)
"unsigned int __cdecl xTaskGetTickCount(void)" (?xTaskGetTickCount@@YAIXZ)
"unsigned long __cdecl millis(void)" (?millis@@YAKXZ)
"void * __cdecl xQueueGenericCreate(unsigned int,unsigned int,unsigned char)" (?xQueueGenericCreate@@YAPAXIIE@Z)
"void __cdecl dacWrite(unsigned char,unsigned char)" (?dacWrite@@YAXEE@Z)
"void __cdecl delay(unsigned int)" (?delay@@YAXI@Z)
"void __cdecl i2s_out_delay(void)" (?i2s_out_delay@@YAXXZ)
"void __cdecl ledcAttachPin(unsigned char,unsigned char)" (?ledcAttachPin@@YAXEE@Z)
"void __cdecl ledcDetachPin(unsigned char)" (?ledcDetachPin@@YAXE@Z)
"void __cdecl ledcWrite(unsigned char,unsigned int)" (?ledcWrite@@YAXEI@Z)
"void __cdecl pinMatrixOutAttach(unsigned char,unsigned char,bool,bool)" (?pinMatrixOutAttach@@YAXEE_N0@Z)
"void __cdecl timerAlarmDisable(struct hw_timer_s *)" (?timerAlarmDisable@@YAXPAUhw_timer_s@@@Z)
"void __cdecl timerAlarmEnable(struct hw_timer_s *)" (?timerAlarmEnable@@YAXPAUhw_timer_s@@@Z)
"void __cdecl timerAlarmWrite(struct hw_timer_s *,unsigned __int64,bool)" (?timerAlarmWrite@@YAXPAUhw_timer_s@@_K_N@Z)
"void __cdecl timerAttachInterrupt(struct hw_timer_s *,void (__cdecl*)(void),bool)" (?timerAttachInterrupt@@YAXPAUhw_timer_s@@P6AXXZ_N@Z)
"void __cdecl timerWrite(struct hw_timer_s *,unsigned __int64)" (?timerWrite@@YAXPAUhw_timer_s@@_K@Z)
"void __cdecl vTaskDelay(unsigned int)" (?vTaskDelay@@YAXI@Z)
"void __cdecl vTaskDelayUntil(unsigned int * const,unsigned int)" (?vTaskDelayUntil@@YAXQAII@Z)
"void __cdecl vTaskEnterCritical(class std::mutex *)" (?vTaskEnterCritical@@YAXPAVmutex@std@@@Z)
"void __cdecl vTaskExitCritical(class std::mutex *)" (?vTaskExitCritical@@YAXPAVmutex@std@@@Z)
_esp_task_wdt_reset
